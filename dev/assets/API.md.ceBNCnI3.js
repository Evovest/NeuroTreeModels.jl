import{_ as t,C as l,c as r,o as p,j as i,a as e,aj as o,G as n}from"./chunks/framework.AtSsdPv4.js";const b=JSON.parse('{"title":"API","description":"","frontmatter":{},"headers":[],"relativePath":"API.md","filePath":"API.md","lastUpdated":null}'),d={name:"API.md"},h={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""};function c(g,s,E,f,u,y){const a=l("Badge");return p(),r("div",null,[s[8]||(s[8]=i("h1",{id:"api",tabindex:"-1"},[e("API "),i("a",{class:"header-anchor",href:"#api","aria-label":'Permalink to "API"'},"​")],-1)),s[9]||(s[9]=i("h2",{id:"training",tabindex:"-1"},[e("Training "),i("a",{class:"header-anchor",href:"#training","aria-label":'Permalink to "Training"'},"​")],-1)),i("details",h,[i("summary",null,[s[0]||(s[0]=i("a",{id:"MLJModelInterface.fit",href:"#MLJModelInterface.fit"},[i("span",{class:"jlbinding"},"MLJModelInterface.fit")],-1)),s[1]||(s[1]=e()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[2]||(s[2]=o(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuroTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dtrain;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    feature_names,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target_name,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    weight_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    offset_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    deval</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    metric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    print_every_n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    verbosity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Training function of NeuroTreeModels&#39; internal API.</p><p><strong>Arguments</strong></p><ul><li><p><code>config::NeuroTypes</code></p></li><li><p><code>dtrain</code>: Must be <code>&lt;:AbstractDataFrame</code></p></li></ul><p><strong>Keyword arguments</strong></p><ul><li><p><code>feature_names</code>: Required kwarg, a <code>Vector{Symbol}</code> or <code>Vector{String}</code> of the feature names.</p></li><li><p><code>target_name</code> Required kwarg, a <code>Symbol</code> or <code>String</code> indicating the name of the target variable.</p></li><li><p><code>weight_name=nothing</code></p></li><li><p><code>offset_name=nothing</code></p></li><li><p><code>deval=nothing</code> Data for tracking evaluation metric and perform early stopping.</p></li><li><p><code>print_every_n=9999</code></p></li><li><p><code>verbosity=1</code></p></li></ul><p><a href="https://github.com/Evovest/NeuroTreeModels.jl/blob/fe6f99c85cea31be23ab6b1a8269f9480178368f/src/fit.jl#L46-L76" target="_blank" rel="noreferrer">source</a></p>`,7))]),s[10]||(s[10]=i("h2",{id:"inference",tabindex:"-1"},[e("Inference "),i("a",{class:"header-anchor",href:"#inference","aria-label":'Permalink to "Inference"'},"​")],-1)),i("details",k,[i("summary",null,[s[3]||(s[3]=i("a",{id:"NeuroTreeModels.infer",href:"#NeuroTreeModels.infer"},[i("span",{class:"jlbinding"},"NeuroTreeModels.infer")],-1)),s[4]||(s[4]=e()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[5]||(s[5]=i("p",null,"infer(m::NeuroTreeModel, data)",-1)),s[6]||(s[6]=i("p",null,[e("Return the inference of a "),i("code",null,"NeuroTreeModel"),e(" over "),i("code",null,"data"),e(", where "),i("code",null,"data"),e(" is "),i("code",null,"AbstractDataFrame"),e(".")],-1)),s[7]||(s[7]=i("p",null,[i("a",{href:"https://github.com/Evovest/NeuroTreeModels.jl/blob/fe6f99c85cea31be23ab6b1a8269f9480178368f/src/infer.jl#L8-L12",target:"_blank",rel:"noreferrer"},"source")],-1))])])}const F=t(d,[["render",c]]);export{b as __pageData,F as default};
